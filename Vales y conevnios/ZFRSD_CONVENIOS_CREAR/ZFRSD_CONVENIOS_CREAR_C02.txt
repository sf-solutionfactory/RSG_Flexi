*&---------------------------------------------------------------------*
*& Include          ZFRSD_CONVENIOS_CREAR_C02
*&---------------------------------------------------------------------*

CLASS cls_cond DEFINITION INHERITING FROM zfr_cl_sf_alv.
  PUBLIC SECTION .
    CLASS-METHODS create
      RETURNING
        VALUE(r_result) TYPE REF TO cls_cond.

    DATA: it_data          TYPE STANDARD TABLE OF ty_cond,
          ls_data_selected TYPE ty_cond,
          desc_type        TYPE zfr_desctype,
          edit             TYPE c.

    METHODS:
      get_data,                                     "Inicializa datos
      set_data IMPORTING folio TYPE zfr_convfolio   "Carga de datos
                         gjahr TYPE gjahr,
      alv_mostrar IMPORTING contenedor TYPE c,      "Mostrar ALV
      destroy,
      validar_tabla,
      """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
****       MANEJAODRES DE EVENTOS
*      handle_before_user_command REDEFINITION,
*      handle_button_click REDEFINITION,
*      handle_double_click REDEFINITION,
*      handle_onf4 REDEFINITION,
*      handle_toolbar REDEFINITION,
      handle_user_command REDEFINITION,
      handle_data_changed_finished REDEFINITION
      .

  PROTECTED SECTION.
    METHODS:
      armar_fieldcat REDEFINITION,
      armar_layout REDEFINITION.

  PRIVATE SECTION.
    DATA: obj_cc_tabla TYPE REF TO cl_gui_container,
          obj_cc_texto TYPE REF TO cl_gui_container,
          obj_split_v  TYPE REF TO cl_gui_splitter_container.

    METHODS:
      row_insert,
      row_delete,
      data_select,
      data_makeup.
ENDCLASS.                    "cls_cabecera DEFINITION

CLASS cls_cond IMPLEMENTATION.
  METHOD create.
    CREATE OBJECT r_result.
  ENDMETHOD.

  METHOD get_data.
    CLEAR it_data.
    CALL METHOD data_select.
    CALL METHOD data_makeup.
    edit = abap_true.
  ENDMETHOD.

  METHOD set_data.
    SELECT * FROM zfr_convp
      INTO CORRESPONDING FIELDS OF TABLE it_data
      WHERE folio EQ folio
        AND gjahr EQ gjahr.

    edit = abap_false.
  ENDMETHOD.                    "set_data

  METHOD data_select.
    DO 1 TIMES.
      APPEND ls_data_selected TO it_data.
    ENDDO.
  ENDMETHOD.                    "data_select

  METHOD data_makeup.
  ENDMETHOD.                    "data_makeup

  METHOD alv_mostrar.
    IF container IS INITIAL.
      CREATE OBJECT container
        EXPORTING
          container_name = contenedor.

    ENDIF.

    CALL METHOD mostrar
      EXPORTING
        contenedor = container
      CHANGING
        t_datos    = it_data.
  ENDMETHOD.                    "alv_mostrar

  METHOD armar_layout.
    CALL METHOD super->armar_layout.
    t_layo-stylefname = 'CELLTAB'.
  ENDMETHOD.                    "ARMAR_LAYOUT

  METHOD armar_fieldcat.
    DATA: ls_fcat   TYPE lvc_s_fcat,
          lt_fcat   TYPE STANDARD TABLE OF lvc_s_fcat,
          lv_colpos TYPE i.

    CLEAR ls_fcat.
    ls_fcat-fieldname = 'ICON'.
    ls_fcat-col_pos = 0.
    ls_fcat-outputlen = 2.
    ls_fcat-edit = ''.
    ls_fcat-icon = abap_true.
    APPEND ls_fcat TO t_fcat.

    CALL FUNCTION 'LVC_FIELDCATALOG_MERGE'
      EXPORTING
*       I_BUFFER_ACTIVE        =
        i_structure_name       = 'ZFR_CONVP'
*       I_CLIENT_NEVER_DISPLAY = abap_true
*       I_BYPASSING_BUFFER     =
      CHANGING
        ct_fieldcat            = lt_fcat
      EXCEPTIONS
        inconsistent_interface = 1
        program_error          = 2
        OTHERS                 = 3.

    IF sy-subrc EQ 0.
      LOOP AT lt_fcat INTO ls_fcat.
*      ls_fcat-col_opt = abap_true.
        ls_fcat-edit = edit.
        ls_fcat-lowercase = abap_true.

        CASE ls_fcat-fieldname.
          WHEN 'MENGE'.
            ls_fcat-outputlen  = 8.
*            ls_fcat-coltext    = TEXT-mng. "Cantidad
            ls_fcat-ref_field    = 'MENGE'.
            ls_fcat-ref_table    = 'ZFR_CONVP'.
            ls_fcat-no_zero     = abap_true.
            ls_fcat-col_pos    = 6.
            APPEND ls_fcat TO t_fcat.
          WHEN 'MENGE_MAX'.
            ls_fcat-outputlen  = 8.
            ls_fcat-ref_field    = 'MENGE_MAX'.
            ls_fcat-ref_table    = 'ZFR_CONVP'.
            ls_fcat-no_zero     = abap_true.
            ls_fcat-col_pos    = 7.
            APPEND ls_fcat TO t_fcat.
**          WHEN 'MATKL'.
          WHEN 'WGHIE'.
            ls_fcat-f4availabl = abap_true.
            ls_fcat-col_pos    = 3.
            APPEND ls_fcat TO t_fcat.
          WHEN 'BONUS'.
            ls_fcat-f4availabl = abap_true.
            ls_fcat-col_pos    = 4.
            APPEND ls_fcat TO t_fcat.
          WHEN 'WRBTR'.
            ls_fcat-ref_field    = 'WRBTR'.
            ls_fcat-ref_table    = 'ZFR_CONVP'.
            ls_fcat-col_pos = 5.
            APPEND ls_fcat TO t_fcat.
          WHEN OTHERS.
        ENDCASE.
        ADD 1 TO lv_colpos.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.                    "armar_fieldcat

  METHOD row_insert.
    DATA: ls_data TYPE ty_cond.

    ADD 1 TO gv_line.
    APPEND ls_data TO it_data.
    CALL METHOD refresh.
  ENDMETHOD.                    "ROW_INSERT

  METHOD row_delete.
    DATA: lt_rows TYPE lvc_t_roid,
          ls_row  TYPE lvc_s_roid,
          ls_data TYPE ty_cond.

    "Obtenemos lineas seleccionadas
    CALL METHOD get_selected_rows
      IMPORTING
        pt_rows = lt_rows.
    IF lt_rows IS INITIAL.
*      MESSAGE 'Seleccione al menos una linea' TYPE 'S'.
      MESSAGE s001 DISPLAY LIKE 'E'.
    ELSE.
      "Marcamos como borradas las lineas seleccionadas
      LOOP AT lt_rows INTO ls_row.
        READ TABLE it_data INTO ls_data INDEX ls_row-row_id.
        ls_data-icon = c_delete.
        MODIFY it_data FROM ls_data INDEX ls_row-row_id.
      ENDLOOP.

      DELETE it_data WHERE icon = c_delete.

      "Actualizamos ALV
      CALL METHOD refresh.
    ENDIF.
  ENDMETHOD.                    "ROW_DELETE

  METHOD handle_user_command.
    IF edit IS NOT INITIAL.
      CASE e_ucomm.
        WHEN 'INSERT_ROW'.
          CALL METHOD row_insert.
        WHEN 'DELETE_ROW'.
          CALL METHOD row_delete.
      ENDCASE.
    ENDIF.
  ENDMETHOD.                    "handle_user_command

  METHOD handle_data_changed_finished.
    DATA: ls_cell LIKE LINE OF et_good_cells,
          ls_data TYPE ty_cond.

    IF e_modified = abap_true.
      LOOP AT et_good_cells INTO ls_cell.
        READ TABLE it_data INTO ls_data INDEX ls_cell-row_id. "Leemos tabla vista

        CLEAR ls_data-icon.
        IF ls_cell-fieldname EQ 'WRBTR'.
          IF desc_type EQ '%' AND ( ls_data-wrbtr GT 100 OR ls_data-wrbtr LT 0 ) .
            ls_data-icon = c_red.
            MESSAGE s002 DISPLAY LIKE 'E'.
          ENDIF.
        ELSEIF ls_cell-fieldname EQ 'MENGE' OR ls_cell-fieldname EQ 'MENGE_MAX'.
          IF ls_data-menge IS INITIAL AND ls_data-menge_max IS INITIAL.
          ELSEIF ls_data-menge IS NOT INITIAL AND ls_data-menge_max IS NOT INITIAL.
            IF ls_data-menge GT ls_data-menge_max.
              ls_data-icon = c_red.
              MESSAGE s003 DISPLAY LIKE 'E'.
            ENDIF.
          ENDIF.
        ENDIF.
        MODIFY it_data FROM ls_data INDEX ls_cell-row_id.
      ENDLOOP.

      refresh( ).
    ENDIF.
  ENDMETHOD.                    "HANDLE_DATA_CHANGED_FINISHED

  METHOD destroy.
    CALL METHOD v_alv->free.
  ENDMETHOD.

  METHOD validar_tabla.
    DATA: ls_tab TYPE ty_cond.

    IF desc_type IS NOT INITIAL.
      LOOP AT it_data INTO ls_tab.
        CLEAR ls_tab-icon.
*        IF ls_tab-matkl IS INITIAL OR ls_tab-bonus IS INITIAL.
        IF ls_tab-wghie IS INITIAL OR ls_tab-bonus IS INITIAL.
          ls_tab-icon = c_red.
        ENDIF.

        IF desc_type = '%'.
          IF ls_tab-wrbtr GT 100 OR ls_tab-wrbtr LT 0.
            MESSAGE s002 DISPLAY LIKE 'E'.
            ls_tab-icon = c_red.
          ENDIF.
        ENDIF.
        IF ls_tab-menge IS INITIAL AND ls_tab-menge_max IS INITIAL.
        ELSEIF ls_tab-menge IS NOT INITIAL AND ls_tab-menge_max IS NOT INITIAL.
          IF ls_tab-menge GT ls_tab-menge_max.
            ls_tab-icon = c_red.
            MESSAGE s003 DISPLAY LIKE 'E'.
          ENDIF.
        ENDIF.
        MODIFY it_data FROM ls_tab.
      ENDLOOP.
    ENDIF.

    refresh( ).
  ENDMETHOD.
ENDCLASS.                    "cls_cabecera IMPLEMENTATION
